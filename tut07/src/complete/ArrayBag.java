package complete;import java.lang.reflect.Array;/** * A class of bags whose entries are stored in a fixed-size array. */public final class ArrayBag<T> implements BagInterface<T> {    //STEP 1: DETERMINES THE DATA FIELDS    /**     * TO-DO: Declares the necessary attributes     * bag: T[]     * numberOfEntries: int     * DEFAULT_CAPACITY: int (30)     * MAX_CAPACITY: int (3000)     */    private T[] bag;    private int numberOfEntries;    private static final int  DEFAULT_CAPACITY = 30;    private static final int MAX_CAPACITY = 3000;    //STEP 2: IMPLEMENTS THE CONSTRUCTORS    /**     * TO-DO: Creates an empty bag with default capacity     */    public ArrayBag() {        this(DEFAULT_CAPACITY);    }    /**     * TO-DO: Creates an empty bag having a given capacity.     *     * @param desiredCapacity The integer capacity desired.     */    public ArrayBag(int desiredCapacity) {        if (desiredCapacity > 0) {            this.bag = (T[]) new Object[desiredCapacity];            numberOfEntries = 0;        } else {            throw new IllegalArgumentException("Capacity is not negative");        }    }    //STEP 3: IMPLEMENTS THE FUNCTIONS    /**     * TO-DO: Adds a new entry to this bag.     *     * @param newEntry The object to be added as a new entry.     * @return True if the addition is successful, or false if not.     */    public boolean add(T newEntry) {        if (isArrayFull()) {            return false;        } else {            this.bag[numberOfEntries] = newEntry;            numberOfEntries++;            return true;        }    }    /**     * TO-DO: Retrieves all entries that are in this bag.     *     * @return A newly allocated array of all the entries in this bag.     */    public T[] toArray() {        @SuppressWarnings("unchecked")        T[] result = (T[]) new Object[numberOfEntries]; // Unchecked cast        // end for        System.arraycopy(bag, 0, result, 0, numberOfEntries);        return result;    }    /**     * TO-DO: Sees whether this bag is empty.     *     * @return True if this bag is empty, or false if not.     */    public boolean isEmpty() {        return this.bag.length > 0;    }    /**     * TO-DO: Gets the current number of entries in this bag.     *     * @return The integer number of entries currently in this bag.     */    public int getCurrentSize() {        return this.numberOfEntries;    }    /**     * TO-DO: Counts the number of times a given entry appears in this bag.     *     * @param anEntry The entry to be counted.     * @return The number of times anEntry appears in this bag.     */    public int getFrequencyOf(T anEntry) {        int frequency = 0;        for (int i = 0; i < this.numberOfEntries; i++) {            if (anEntry.equals(this.bag[i])) {                frequency++;            }        }        return frequency;    }    /**     * TO-DO: Tests whether this bag contains a given entry.     *     * @param anEntry The entry to locate.     * @return True if this bag contains anEntry, or false otherwise.     */    public boolean contains(T anEntry) {        return this.getIndexOf(anEntry) > -1;    }    /**     * TO-DO: Removes all entries from this bag.     */    public void clear() {        while (!isEmpty()) {            this.remove();        }    }    /**     * TO-DO: Removes one unspecified entry from this bag, if possible.     *     * @return Either the removed entry, if the removal was successful, or null.     */    public T remove() {        int randIndex = (int) (Math.random() * this.numberOfEntries);        T removedElement = this.bag[randIndex];        this.remove(removedElement);        return removedElement;    }    /**     * TO-DO: Removes one occurrence of a given entry from this bag.     *     * @param anEntry The entry to be removed.     * @return True if the removal was successful, or false if not.     */    public boolean remove(T anEntry) {        int index = getIndexOf(anEntry);        T result = removeEntry(index);        return anEntry.equals(result);    }    // TO-DO: Returns true if the array bag is full, or false if not.    private boolean isArrayFull() {        return this.numberOfEntries >= this.bag.length;    }    // TO-DO: Locates a given entry within the array bag.    // Returns the index of the entry, if located,    // or -1 otherwise.    // Precondition: checkInitialization has been called.    private int getIndexOf(T anEntry) {        for (int i = 0; i < this.numberOfEntries ; i++) {            if (anEntry.equals(this.bag[i])) {                return i;            }        };        return -1;    }    // TO-DO: Removes and returns the entry at a given index within the array.    // If no such entry exists, returns null.    // Precondition: 0 <= givenIndex < numberOfEntries.    // Precondition: checkInitialization has been called.    private T removeEntry(int givenIndex) {        T result = null;        if (!isEmpty() && (givenIndex >= 0)) {            result = bag[givenIndex];          // Entry to remove            int lastIndex = numberOfEntries - 1;            bag[givenIndex] = bag[lastIndex];  // Replace entry to remove with last entry            bag[lastIndex] = null;             // Remove reference to last entry            numberOfEntries--;        } // end if        return result;    }}